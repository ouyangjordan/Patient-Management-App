{"ast":null,"code":"var _jsxFileName = \"/Users/jordan/Desktop/Django React/FrontEnd/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { PatientsTable } from './PatientsTable.js';\nimport { Header } from './Header.js';\nimport { ExportCSV } from './ExportCSV.js';\nimport { PatientEntryForm } from './PatientEntryForm.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    /*\n    this.state = {\n      patientName: \"\",\n      age: \"\",\n      symptoms: \"\",\n      comments: \"\",\n      roomNumber: \"\",\n    };*/\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.addPatient = this.addPatient.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('/api/v1/songs', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      console.log(\"Yeet\");\n      console.log(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      console.log(\"Fail\");\n      console.log(error);\n    });\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  addPatient(event) {\n    this.addPatientRequst();\n    event.preventDefault(); //So the form does not submit automatically and refresh page\n\n    this.patients.push({\n      patientName: this.state.patientName,\n      age: this.state.age,\n      symptoms: this.state.symptoms,\n      comments: this.state.comments,\n      roomNumber: this.state.roomNumber\n    }); //PREVIOUSLY WHEN WE DIDN't modify state\n    //our table would not be updated\n    //We have to have state modified for updates to take place in page\n\n    this.setState({\n      patientName: \"\",\n      age: \"\",\n      symptoms: \"\",\n      comments: \"\",\n      roomNumber: \"\"\n    });\n  }\n\n  addPatientRequst() {\n    fetch('/api/v1/songs/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: \"sadf\",\n        artist: \"sadf\"\n      })\n    }).then(res => res.json()).then(result => {\n      console.log(\"Yeet\");\n      console.log(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      console.log(\"Fail\");\n      console.log(error);\n    });\n  } //https://reactjs.org/docs/forms.html\n  //Use that when we have a working back end\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(PatientEntryForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-8\",\n      class: \"m-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(PatientsTable, {\n      patients: this.patients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jordan/Desktop/Django React/FrontEnd/src/App.js"],"names":["React","PatientsTable","Header","ExportCSV","PatientEntryForm","App","Component","constructor","props","handleInputChange","bind","addPatient","componentDidMount","fetch","method","headers","then","res","json","result","console","log","error","event","target","value","type","checked","name","setState","addPatientRequst","preventDefault","patients","push","patientName","state","age","symptoms","comments","roomNumber","body","JSON","stringify","title","artist","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport { PatientsTable } from './PatientsTable.js'\nimport { Header } from './Header.js'\nimport { ExportCSV } from './ExportCSV.js'\nimport { PatientEntryForm } from './PatientEntryForm.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    /*\n    this.state = {\n      patientName: \"\",\n      age: \"\",\n      symptoms: \"\",\n      comments: \"\",\n      roomNumber: \"\",\n    };*/\n\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.addPatient = this.addPatient.bind(this);\n  }\n  componentDidMount() {\n    fetch('/api/v1/songs', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(\"Yeet\")\n          console.log(result)\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log(\"Fail\")\n          console.log(error)\n        }\n      )\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n\n  }\n  addPatient(event) {\n\n    this.addPatientRequst();\n    event.preventDefault(); //So the form does not submit automatically and refresh page\n    this.patients.push({\n      patientName: this.state.patientName, age: this.state.age,\n      symptoms: this.state.symptoms, comments: this.state.comments,\n      roomNumber: this.state.roomNumber\n    });\n    //PREVIOUSLY WHEN WE DIDN't modify state\n    //our table would not be updated\n    //We have to have state modified for updates to take place in page\n    this.setState({\n      patientName: \"\",\n      age: \"\",\n      symptoms: \"\",\n      comments: \"\",\n      roomNumber: \"\",\n    });\n  }\n\n  addPatientRequst() {\n\n    fetch('/api/v1/songs/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        title: \"sadf\",\n        artist : \"sadf\"\n      })\n    })\n    .then(res => res.json())\n    .then(\n      (result) => {\n        console.log(\"Yeet\")\n        console.log(result)\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        console.log(\"Fail\")\n        console.log(error)\n      }\n    )\n}\n\n    \n    \n  //https://reactjs.org/docs/forms.html\n  //Use that when we have a working back end\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Beginning of Form */}\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <PatientEntryForm></PatientEntryForm>\n          </div>\n          <div className=\"col-md-8\" class=\"m-5\">\n            {/* Beginning of Table*/}\n            <PatientsTable patients={this.patients} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}